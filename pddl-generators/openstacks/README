generate_problems.cpp:

Ioannis's program for generating the text files that define the
Openstacks instances. The ICAPS benchmark set was created with
something like the following calls:

./generate_problems  5  34  1 1 1 XXX
./generate_problems  5  20  5 1 3 XXX
./generate_problems 30  60 10 1 3 XXX
./generate_problems 80 100 20 1 3 XXX

where XXX is the density parameter which has unfortunately been lost
(20? 25? 30? 40?). For generating additional benchmark instances, the
Python script (below) should be preferred.


generate_problems.py:

A Python version of Ioannis's program which fixes a few issues with
the C++ program:

 * When an order is empty, some product is chosen uniformly randomly
   to make it nonempty. Due to an off-by-one error, the last product
   could never be chosen for this.

 * Similarly, unused products would randomly be added to one order.
   Due to an off-by-one error, the last order could never be selected
   for this.

 * The original code shuffled the orders after generating the problem
   matrix. However, this shuffling was not completely uniform. To see
   this, consider e.g. a 5x5 problem, where the shuffling algorithm
   would uniformly compute ten random numbers in the range {0, ...,
   4}, which gives 5^10 atomic events with uniform probability. From
   this random information, it's not possible to select between 5! =
   120 permutations uniformly since 120 does not divide 5^10.

 * More seriously, the original code did not shuffle the products.
   Adjacent products are correlated in that they tend to be useful for
   the same orders, so this may introduce some bias for planners that
   for whatever (tie-breaking) reason process the products in some
   kind of sequential order.


generate_pddl.cpp:

Ioannis's program for generating PDDL code from the text files
generated by generate_problems. Need to change various global
variables (opt, sat, all, ADL, negated, semiground, temporal, numeric,
net_benefit) to affect which problem set is generated.
