#include "search_space.h"

#include <cassert>
#include <ext/hash_map>
#include <iostream>

using namespace std;
using namespace __gnu_cxx;

class StateProxy {
	// This class is basically a pointer that can be reassigned even
	// though it is const. This is needed for the hash table below,
	// where a node may first be inserted with a pointer to a
	// temporary object as the key, which will then later be replaced
	// with a pointer to a heap-allocated object generated by
	// make_permanent below.
	// Despite the const-ness, mutating the key of a hash_map in place
	// is fine as long as the mutation does not affect the hash value
	// (which this one does not, as it only changes the address of the
	// state, whereas the contents of the state are used for hashing).

	// Update: This was changed from a State* to an unsigned char*
	//         that points "inside" the state to shave off some memory.
public:
	mutable State *state_data;

	StateProxy() {
		state_data = 0;
	}

	StateProxy(State *state_data_) {
		state_data = state_data_;
	}

	explicit StateProxy(const State *state) {
		state_data = const_cast<State *> (state);
	}

	const StateProxy &operator=(const StateProxy &other) const {
		state_data = other.state_data;
		return *this;
	}
	bool operator==(const StateProxy &other) const {
		return *state_data == *(other.state_data);
	}
	void make_permanent() const {
		State * new_buffer = new State;
		(*new_buffer) = (*state_data);
		state_data = new_buffer;
	}
};

namespace __gnu_cxx {
template<>
struct hash<StateProxy> {
	size_t operator()(const StateProxy &state_proxy) const {
		return state_proxy.state_data->hash();
	}
};
}

SearchNode::SearchNode(State* state, SearchNodeInfo &info_) :
	state_buffer(state), info(info_) {
}

State SearchNode::get_state() const {
	return (*state_buffer);
}

bool SearchNode::is_open() const {
	return info.status == SearchNodeInfo::OPEN;
}

bool SearchNode::is_closed() const {
	return info.status == SearchNodeInfo::CLOSED;
}

bool SearchNode::is_dead_end() const {
	return info.status == SearchNodeInfo::DEAD_END;
}

int SearchNode::get_h() const {
	return info.h;
}

void SearchNode::open_initial(int h) {
	assert(info.status == SearchNodeInfo::NEW);
	info.status = SearchNodeInfo::OPEN;
	info.h = h;
}

void SearchNode::open(int h) {
	assert(info.status == SearchNodeInfo::NEW);
	info.status = SearchNodeInfo::OPEN;
	info.h = h;
}

void SearchNode::reopen(int h) {
	// Must never reopen closed nodes with consistent heuristics.
	assert(info.status == SearchNodeInfo::OPEN);
	info.status = SearchNodeInfo::OPEN;
	info.h = h;
}

void SearchNode::close() {
	assert(info.status == SearchNodeInfo::OPEN);
	info.status = SearchNodeInfo::CLOSED;
}

void SearchNode::mark_as_dead_end() {
	assert(info.status == SearchNodeInfo::NEW);
	info.status = SearchNodeInfo::DEAD_END;
}

void SearchNode::dump() {
	state_buffer->dump();
}

class SearchSpace::HashTable: public __gnu_cxx::hash_map<StateProxy, SearchNodeInfo> {
	// This is more like a typedef really, but we need a proper class
	// so that we can hide the information in the header file by using
	// a forward declaration. This is also the reason why the hash
	// table is allocated dynamically in the constructor.
};

SearchSpace::SearchSpace() {
	nodes = new HashTable;
}

SearchSpace::~SearchSpace() {
	delete nodes;
}

int SearchSpace::size() const {
	return nodes->size();
}

SearchNode SearchSpace::get_node(const State* state) {
	static SearchNodeInfo default_info;
	pair<HashTable::iterator, bool> result = nodes->insert(make_pair(StateProxy(state), default_info));
	if (result.second) {
		// This is a new entry: Must give the state permanent lifetime.
		result.first->first.make_permanent();
	}
	HashTable::iterator iter = result.first;
	return SearchNode(iter->first.state_data, iter->second);
}

void SearchSpace::dump() {
	for (HashTable::iterator iter = nodes->begin(); iter != nodes->end(); iter++) {
		(iter->first.state_data)->dump();
		cout << " h: " << iter->second.h << endl;
	}
}

void SearchSpace::statistics() const {
	cout << "search space hash size: " << nodes->size() << endl;
	cout << "search space hash bucket count: " << nodes->bucket_count() << endl;
}
